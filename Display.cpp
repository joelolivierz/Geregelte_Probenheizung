#include "Adafruit_GFX.h"
#include "Adafruit_HX8357.h"
#include <Fonts/FreeSansBold9pt7b.h>

#define TFT_CS   21
#define TFT_DC   14
#define TFT_RST -1
#define COLOR_METROHM 0x0471
#define COLOR_GRAY 0xC638

float lastShouldTemp = 200, lastIsTemp = 200;
int y = -15;

Adafruit_HX8357 tft = Adafruit_HX8357(TFT_CS, TFT_DC, TFT_RST);

// 'metrohm_logo', 50x50px
const unsigned char epd_bitmap_metrohm_logo[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 
	0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 
	0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x0f, 0xf8, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x01, 0xff, 0x00, 0x00, 0x00, 0x1f, 
	0xe0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 
	0xff, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 0x80, 
	0x00, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x7f, 0x80, 0x00, 0x00, 
	0x3f, 0xc0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xe0, 
	0x00, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x01, 0xff, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x03, 0xfe, 
	0x00, 0x00, 0x00, 0x0f, 0xf8, 0x07, 0xfe, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x07, 0xff, 0xfc, 0x00, 
	0x07, 0xff, 0xf8, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xf8, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 
	0xf8, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xf8, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xf8, 0x07, 
	0xff, 0xfc, 0x00, 0x07, 0xff, 0xf8, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xf8, 0x07, 0xff, 0xfc, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void loadGUI(){
  //tft settings
  tft.begin();
  tft.setRotation(3);
  tft.setFont(&FreeSansBold9pt7b);
  tft.fillScreen(HX8357_WHITE);
  tft.setTextColor(HX8357_BLACK);
  //text
  tft.setTextSize(2);
  tft.setCursor(20, 35);
  tft.println(F("Geregelte Probenheizung"));
  tft.setCursor(255, 301);
  tft.setTextSize(2);
  tft.println(F("Metrohm"));
  //metrohm logo
  tft.drawBitmap(415, 265, (uint8_t *)epd_bitmap_metrohm_logo, 50, 50, COLOR_METROHM);
  //boxes und signes for should temp modification
  tft.drawRect(215, 90+y, 50, 50, HX8357_BLACK);
  tft.fillTriangle(225, 130+y, 255, 130+y, 240, 100+y, COLOR_METROHM);
  tft.drawRect(215, 160+y, 50, 50, HX8357_BLACK);
  tft.fillTriangle(225, 170+y, 255, 170+y, 240, 200+y, COLOR_METROHM);
  //status lamp
  tft.setTextSize(1);
  tft.setFont(&FreeSansBold9pt7b);
  tft.setCursor(135, 256+y);
  tft.println(F("Status:"));
  tft.fillCircle(240, 250+y, 20, HX8357_RED);
  //should/is boxes
  tft.setCursor(75, 110);
  tft.println(F("SOLL"));
  tft.drawRect(50, 120, 100, 60, HX8357_BLACK);
  tft.setCursor(365, 110);
  tft.println(F("IST"));
  tft.drawRect(330, 120, 100, 60, HX8357_BLACK);
  //start/stopp button
  tft.drawRect(57, 273, 90, 40, HX8357_BLACK);
  tft.fillRect(58, 274, 88, 38, COLOR_GRAY);
  tft.setCursor(70, 300);
  tft.println(F("START"));
}

void updateTemps(float temp, bool choice){
  //if choice == 1, then print is-temp, else print should temp
  if((choice) && (lastIsTemp!=temp)){ // 
    tft.fillRect(340, 130, 80, 40, HX8357_WHITE);
    tft.setCursor(354, 155);
    tft.println(temp);
  }else if((!choice) && (lastShouldTemp!=temp)){//
    tft.fillRect(60, 130, 80, 40, HX8357_WHITE);
    tft.setCursor(75, 155);
    tft.println(temp);
  }
  //updating last-values
  if(choice){
    lastIsTemp = temp;
  }else{
    lastShouldTemp = temp;
  }
}

void updateStatusLamp(int lampColor){
  if(lampColor==1){
    tft.fillCircle(240, 250+y, 20, HX8357_GREEN);
  }else{
    tft.fillCircle(240, 250+y, 20, HX8357_RED);
  }
}

void updateStartStoppButton(bool toggle){
  tft.fillRect(58, 274, 88, 38, COLOR_GRAY);
  tft.setCursor(70, 300);
  if(toggle){
    tft.println(F("STOPP"));
  }else{
    tft.println(F("START"));
  }
}